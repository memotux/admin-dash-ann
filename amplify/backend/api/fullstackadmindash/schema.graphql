type ProductStatDate {
  month: String
  date: AWSDate
  totalSales: Int!
  totalUnits: Int!
}

enum DataType {
  PRODUCT
  PRODUCTSTAT
}

enum UserRoles {
  user
  admin
}

type Product
  @model
  @auth(
    rules: [
      { allow: public }
      { allow: groups, groups: ["admin"] }
      { allow: groups, groups: ["user"], operations: [read, create, update] }
      { allow: owner }
    ]
  ) {
  id: ID!
  owner: String!
  name: String
  price: Float
  description: String
  category: String
  rating: Float
  supply: Int
  yearlySalesTotal: Int
  yearlyTotalSoldUnits: Int
  monthlyStat: [ProductStatDate]
  dailyStat: [ProductStatDate]
  transactions: [Transaction] @manyToMany(relationName: "ProductTransactions")
}

type User
  @model
  @auth(
    rules: [
      { allow: public }
      { allow: groups, groups: ["admin"] }
      { allow: groups, groups: ["user"], operations: [read, create, update] }
    ]
  ) {
  id: ID!
  name: String
  email: AWSEmail!
  city: String
  state: String
  country: String
  occupation: String
  phoneNumber: AWSPhone
  transactions: [Transaction] @hasMany(indexName: "byUserId", fields: ["id"])
  role: UserRoles! @index(name: "byRole", queryField: "userByRole")
}

type Transaction
  @model
  @auth(
    rules: [
      { allow: public }
      { allow: groups, groups: ["admin"] }
      { allow: groups, groups: ["user"], operations: [read, create, update] }
    ]
  ) {
  id: ID!
  userId: ID! @index(name: "byUserId")
  cost: Float
  products: [Product] @manyToMany(relationName: "ProductTransactions")
}
